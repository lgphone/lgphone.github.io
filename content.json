{"pages":[{"title":"about","text":"000111","link":"/about/index.html"}],"posts":[{"title":"helloworld","text":"","link":"/2019/11/25/helloworld/"},{"title":"kubernetes 内部多个应用之间的通信方法","text":"举例我们一共有两个项目，一个是资源库resource-api，一个是用户及权限user-api，在资源库中需要调用用户模块鉴别用户的信息。在k8s内部这两个服务是如何通信的呢？ 其实基于k8s的service 就可以了，我们内部已经有了coredns 当我们在pod内部请求service的name的时候会自动解析到对应的service ip上，并通过service做负载均衡 下面我们基于python实战一下这两个服务的交互过程 Harbor Registry domain: 192.168.1.113 创建用户权限项目初始化镜像build目录:123456cd /ops/tempmkdir build-images &amp;&amp; cd build-imagesmkdir user-api &amp;&amp; cd user-apipython3 -m venv venv &amp;&amp; source venv/bin/activatemkdir appvim app/main.py 编写用户项目接口,实现访问/ api 返回用户的基础信息:12345678910111213141516171819202122232425#!/usr/bin/env python3import timeimport jsonimport socketimport timefrom flask import Flask app = Flask(__name__) @app.route('/')def hello_world(): data = { \"hostname\": socket.gethostname(), \"user_name\": 'xiaoming', \"passport\": '28dku73kd0210ewl43y47d', \"role_id\": 2, \"time\": str(time.time()) } return json.dumps(data) if __name__ == '__main__': app.run(host=\"0.0.0.0\", port=5000) 生成依赖文件pip freeze &gt; requirements.txt 编写Dockerfilevim Dockerfile 123456789FROM python:3.6.8RUN mkdir /codeCOPY app /codeCOPY requirements.txt /codeRUN chmod +x /code/main.py &amp;&amp; \\ pip install -r /code/requirements.txt -i https://pypi.douban.com/simpleWORKDIR /codeCMD [\"./main.py\"] 创建imagedocker build -t 192.168.1.113/library/user-api:1.0 . 推送到harbor仓库docker push 192.168.1.113/library/user-api:1.0 创建资源库项目初始化镜像build目录:12345cd /ops/temp/build-imagesmkdir resource-api &amp;&amp; cd resource-apipython3 -m venv venv &amp;&amp; source venv/bin/activatemkdir appvim app/main.py 编写资源库项目接口,实现访问/ api 返回资源信息以及用户信息:123456789101112131415161718192021222324252627282930313233343536373839404142#!/usr/bin/env python3import osimport timeimport jsonimport socketimport requestsfrom flask import Flask app = Flask(__name__)# 访问user api的接口url 是在k8s中user-api的service name + portuser_api_api = \"http://user-api:5000/\"@app.route('/')def service(): data = { \"self_hostname\": socket.gethostname(), \"book_id\": 1, \"book_name\": \"《钢铁是怎样炼成的》\", \"book_author\": \"不知\", \"book_size\": 120973, \"book_info\": \"序言 1 2 3 4 5 6 7\", \"status\": 200, \"user_info\": None } try: req = requests.get(user_api_api) if req.status_code == 200: res = req.json() data['user_info'] = res else: data['status'] = 501 except Exception as e: data['status'] = 500 data['err'] = str(e) return json.dumps(data) if __name__ == '__main__': app.run(host=\"0.0.0.0\",port=8010) 生成依赖文件pip freeze &gt; requirements.txt 编写Dockerfilevim Dockerfile 123456789FROM python:3.6.8RUN mkdir /codeCOPY app /codeCOPY requirements.txt /codeRUN chmod +x /code/main.py &amp;&amp; \\ pip install -r /code/requirements.txt -i https://pypi.douban.com/simpleWORKDIR /codeCMD [\"./main.py\"] 创建imagedocker build -t 192.168.1.113/library/resource-api:1.0 . 推送到harbor仓库docker push 192.168.1.113/library/resource-api:1.0 部署user-api项目到k8s中编写yaml部署文件vim user-api.yaml 12345678910111213141516171819202122232425262728293031323334353637apiVersion: v1kind: Servicemetadata: name: user-api labels: app: user-apispec: type: ClusterIP selector: app: user-api ports: - name: user-api port: 5000 targetPort: 5000---apiVersion: apps/v1kind: Deploymentmetadata: name: user-api labels: addonmanager.kubernetes.io/mode: Reconcile app_type: backendspec: selector: matchLabels: app: user-api replicas: 3 template: metadata: labels: app: user-api spec: containers: - name: user-api image: 192.168.1.113/library/user-api:1.0 ports: - containerPort: 5000 执行部署kubectl apply -f user-api.yaml 检查服务1234# 查看user-api 的service ip地址kubectl get service -o wide# 测试访问是否okcurl 10.68.15.227:5000 1234567{ \"hostname\": \"user-api-84f8484446-z8wqd\", \"user_name\": \"xiaoming\", \"passport\": \"28dku73kd0210ewl43y47d\", \"role_id\": 2, \"time\": \"1574824013.1845496\"} 部署resource-api项目到k8s中编写yaml部署文件vim resource-api.yaml 12345678910111213141516171819202122232425262728293031323334353637apiVersion: v1kind: Servicemetadata: name: resource-api labels: app: resource-apispec: type: ClusterIP selector: app: resource-api ports: - name: resource-api port: 8010 targetPort: 8010---apiVersion: apps/v1kind: Deploymentmetadata: name: resource-api labels: addonmanager.kubernetes.io/mode: Reconcile app_type: backendspec: selector: matchLabels: app: resource-api replicas: 3 template: metadata: labels: app: resource-api spec: containers: - name: resource-api image: 192.168.1.113/library/resource-api:1.0 ports: - containerPort: 8010 执行部署kubectl apply -f resource-api.yaml 检查服务1234567891011# 查看resource-api 的service ip地址kubectl get service -o wide---NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTORkubernetes ClusterIP 10.68.0.1 &lt;none&gt; 443/TCP 3d20h &lt;none&gt;nginx-test NodePort 10.68.44.102 &lt;none&gt; 80:25033/TCP 23h app=nginx-testresource-api ClusterIP 10.68.102.244 &lt;none&gt; 8010/TCP 40s app=resource-apiuser-api ClusterIP 10.68.15.227 &lt;none&gt; 5000/TCP 3m58s app=user-api---# 测试访问是否okcurl 10.68.102.244:8010 返回12345678910111213141516{ \"self_hostname\": \"resource-api-6bf957c989-l7j4s\", \"book_id\": 1, \"book_name\": \"《钢铁是怎样炼成的》\", \"book_author\": \"不知\", \"book_size\": 120973, \"book_info\": \"序言 1 2 3 4 5 6 7\", \"status\": 200, \"user_info\": { \"hostname\": \"user-api-84f8484446-j4nxz\", \"user_name\": \"xiaoming\", \"passport\": \"28dku73kd0210ewl43y47d\", \"role_id\": 2, \"time\": \"1574824257.6201055\" }}","link":"/2019/11/27/kubernetes-fu-wu-jian-tong-xin/"}],"tags":[{"name":"kubernetes","slug":"kubernetes","link":"/tags/kubernetes/"}],"categories":[]}